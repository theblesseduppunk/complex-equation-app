import streamlit as st
import numpy as np
import plotly.graph_objects as go
import random

# --- CSS & styling (metallic chrome + Futura-like font) ---
st.markdown(
    """
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Futura+PT:wght@400;700&display=swap');
    .stApp {
        background: linear-gradient(135deg, #2f2f2f, #4f4f4f, #2f2f2f);
        color: #eee;
        font-family: 'Futura PT', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        min-height: 100vh;
    }
    h1, h2, h3 {
        color: #c0c0c0;
        text-shadow:
            0 0 5px #fff,
            0 0 10px #b0b0b0,
            0 0 15px #a0a0a0;
    }
    .stSlider > div > div > div > input {
        accent-color: #d4d4d4;
    }
    button[kind="primary"] {
        background: linear-gradient(90deg, #a9a9a9, #e0e0e0);
        color: #222;
        font-weight: bold;
        border-radius: 8px;
        box-shadow: 0 0 5px #888 inset;
    }
    button[kind="secondary"] {
        background: linear-gradient(90deg, #6f6f6f, #a9a9a9);
        color: white;
        border-radius: 8px;
    }
    </style>
    """, unsafe_allow_html=True
)

st.markdown("# ‚öôÔ∏è‚ú® The Complex Equation Simulator ‚ú®‚öôÔ∏è")

# --- Randomized preset generator ---
def random_preset():
    return {
        "attention": round(random.uniform(0.1, 2.0), 2),
        "memory": round(random.uniform(0.1, 2.0), 2),
        "sensory": round(random.uniform(1, 20), 1),
        "higher_dim": round(random.uniform(1.0, 10.0), 2),
        "R": random.randint(50, 200),
        "alpha": round(random.uniform(0.5, 3.0), 2),
        "beta": round(random.uniform(1.0, 5.0), 2),
        "theta": round(random.uniform(0.5, 3.0), 2),
        "Q": round(random.uniform(0.1, 2.0), 2),
        "E": round(random.uniform(0.1, 2.0), 2),
    }

# Use session state for persistence
if "params" not in st.session_state:
    st.session_state.params = random_preset()

if st.button("üîÑ Randomize Scenario"):
    st.session_state.params = random_preset()

p = st.session_state.params

# Sliders with default values from preset
attention = st.slider("Attention (A)", 0.1, 2.0, p["attention"], 0.05)
memory = st.slider("Memory (M)", 0.1, 2.0, p["memory"], 0.05)
sensory = st.slider("Sensory Processing (S)", 1, 20, p["sensory"], 1)
higher_dim = st.slider("Higher-Dimensional Space (D‚Çô)", 1.0, 10.0, p["higher_dim"], 0.1)

R = st.slider("Reality Magnitude (R)", 50, 200, p["R"], 1)
alpha = st.slider("Alpha (Œ±)", 0.5, 3.0, p["alpha"], 0.05)
beta = st.slider("Beta (Œ≤)", 1.0, 5.0, p["beta"], 0.05)
theta = st.slider("Theta (Œ∏)", 0.5, 3.0, p["theta"], 0.05)
Q = st.slider("Q", 0.1, 2.0, p["Q"], 0.05)
E = st.slider("E", 0.1, 2.0, p["E"], 0.05)

def complexity(R, alpha, theta, S, Q, A, E, M, Dn, beta):
    numerator = R * (alpha ** theta) * S * Q * (1.2 * A) * E * (1.5 * M)
    denominator = Dn * (beta ** theta)
    return numerator / denominator

C = complexity(R, alpha, theta, sensory, Q, attention, E, memory, higher_dim, beta)
st.markdown(f"### Calculated Complexity (C): {C:.2f}")

# 3D Surface Plot for Attention (A) vs Memory (M) vs Complexity (C)
A_vals = np.linspace(0.1, 2.0, 40)
M_vals = np.linspace(0.1, 2.0, 40)
A_grid, M_grid = np.meshgrid(A_vals, M_vals)

Z = complexity(R, alpha, theta, sensory, Q, A_grid, E, M_grid, higher_dim, beta)

fig = go.Figure(data=[go.Surface(z=Z, x=A_vals, y=M_vals, colorscale='Viridis', showscale=True)])

fig.update_layout(
    scene=dict(
        xaxis_title='Attention (A)',
        yaxis_title='Memory (M)',
        zaxis_title='Complexity (C)',
        bgcolor='rgba(0,0,0,0)'
    ),
    paper_bgcolor='rgba(0,0,0,0)',
    font=dict(color='#eee', family='Futura PT, Segoe UI'),
    margin=dict(l=0, r=0, b=0, t=40)
)

st.plotly_chart(fig, use_container_width=True)

# Sound effect toggle
sound_enabled = st.checkbox("Enable Sound Effects üîä", value=False)

if sound_enabled:
    st.markdown(
        """
        <audio id="sliderSound" src="https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg"></audio>
        <script>
        const sliders = window.parent.document.querySelectorAll('input[type=range]');
        const sound = document.getElementById('sliderSound');
        sliders.forEach(slider => {
            slider.oninput = () => { sound.play(); };
        });
        </script>
        """,
        unsafe_allow_html=True
    )
